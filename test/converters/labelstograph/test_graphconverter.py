import pytest

from src.converters.labelstograph.graphconverter import GraphConverter
from src.converters.labelstograph.eventresolver import SimpleResolver

from src.util.loader import load_sentence
from src.util import constants

@pytest.fixture(scope="module")
def sut() -> GraphConverter:
    return GraphConverter(eventresolver=SimpleResolver())

@pytest.fixture
def sentence(id: str):
    _, sentence, labels, graph, _ = load_sentence(filename=f'{constants.SENTENCES_PATH}/sentence-{id}.json')
    return {
        'text': sentence,
        'labels': labels,
        'graph': graph
    }

# currently excluded: sentence 16 (split cause1), 10 & 11 (for exceptive clauses), 17 (overruled precedence)
@pytest.mark.system
@pytest.mark.parametrize('id', ['1', '1b', '1c', '2', '3', '4', '5', '6', '6b', '7', '8', '12', '13', '14'])
def test_graphconverter(sentence, sut: GraphConverter):
    """Test that a graph generated by the graphconverter is equal to a manually generated one"""
    graph = sut.generate_graph(sentence['text'], sentence['labels'])
    assert sentence['graph'] == graph
